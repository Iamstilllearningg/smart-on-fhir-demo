{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Smart on FHIR Introduction This documentation will help you create a Sandbox Application using Github pages and Innovaccer Developer Portal to explore FHIR resources. Prerequisites A Github account Github Pages For the purposes of this tutorial we will be hosting our SMART on FHIR app through Github Pages. Github Pages is a convenient way to host static or client rendered web sites. Setting up Github pages is easy, so easy in fact that it\u2019s already done for you. It can also be done by the master branch appraoch, first of all, you need to clone the repository, got to settings and then enable the Github Pages there. Since you forked the tutorial, the gh-pages branch has already been created, however Github won\u2019t publish your site until you make a change to the gh-pages branch, so let\u2019s make a change. Modify the index.html page to include your Github user-name in the title, and commit directly to gh-pages branch. Use Github UI to directly edit index.html . Simply switch the branch to gh-pages, navigate to /smart-on-fhir-demo/app/index.html and click the pencil icon. Commit your changes to deploy. Once the app has been redeployed go to https://<gh-username>.github.io/smart-on-fhir-demo/app/index.html to ensure your app is available Project Structure The overall structure of repo \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 static \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 json-viewer.css \u2502 \u2502 \u2514\u2500\u2500 mainPage.css \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2514\u2500\u2500 innovaccer_logo.svg \u2502 \u2514\u2500\u2500 js \u2502 \u251c\u2500\u2500 data.js \u2502 \u251c\u2500\u2500 json-viewer.js \u2502 \u251c\u2500\u2500 pagination.js \u2502 \u251c\u2500\u2500 querySelect.js \u2502 \u251c\u2500\u2500 renderJSON.js \u2502 \u2514\u2500\u2500 script.js \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 base.html \u2502 \u251c\u2500\u2500 entrypoint.html \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u251c\u2500\u2500 base.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u2502 \u2502 \u2514\u2500\u2500 font-awesome.min.css \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2502 \u251c\u2500\u2500 default_favicon.ico \u2502 \u2502 \u2502 \u2514\u2500\u2500 flowchart.png \u2502 \u2502 \u2514\u2500\u2500 js \u2502 \u2502 \u251c\u2500\u2500 bootstrap.min.js \u2502 \u2502 \u251c\u2500\u2500 fhir.js \u2502 \u2502 \u251c\u2500\u2500 jquery-3.2.1.slim.min.js \u2502 \u2502 \u251c\u2500\u2500 jquery.min.js \u2502 \u2502 \u251c\u2500\u2500 oauth.js \u2502 \u2502 \u251c\u2500\u2500 popper.min.js \u2502 \u2502 \u251c\u2500\u2500 storage.js \u2502 \u2502 \u2514\u2500\u2500 utils.js \u2502 \u2514\u2500\u2500 status.html \u251c\u2500\u2500 README.md For the reusability and scalability of the Application, its divided into 2 packages Core App Core The Core package contains the libraries that connect to the portal. These can be added to other applications as it is.The user can use these libraries to build desired custom applications. The key features of these libraries are Connect to the portal Authorize the users using OAuth2.0 Perform the FHIR Search operation App The App package contains the libraries used to build the application. The key features of these libraries are The UI of the application Display results in tabular format Perform custom query feature Pagination feature Project Setup The user needs to fork this repository and deploy it to Github pages. Guide to deploying a repository to Github pages can be found here https://help.github.com/en/github/working-with-github-pages . After getting the link for the deployed repository, the user needs to enter it in the developer portal and click verify. It is then checked whether the link is valid or not, by hitting the status.html page in the repo. The complete flow used is shown in the image below: App Launch After the verification of the link by the portal, a launch button appears which on clicking launches the application After verification of the url in the entrypoint.html which contains the client id, api_url and the ouath_url, these are stored in the local/session storage and redirects to base.html . The user needs to enter the client_secret in the base.html which is again stored in local/session storage. Note ; Client secret is sensitive information and for the sample sandbox app we store them in Local storage. We recommend using alternative methods in production application and safeguarding the client_secret from XSS attacks. This then redirects to index.html which is the home page of our app. On the indexl, access token is obtained using oauth lib for Access Token Retrieval The access token is generated using the oauth lib. Ouath Lib Our authentication follows OAuth 2.0 protocol to authorize the user. It uses the Client Credentials grant workflow. To perform the authorization, the client_id, client_secret and oauth url which were stored in the previous steps are retrieved from the storage using the storageDriver. The accessToken is first searched in the storage, if present, it is checked whether the token is still valid or timed out. In case of a timed out token, a fresh one is requested. In case, token is not found in the storage, a fresh token is generated. Everytime a new token is generated, it is stored in the storage as well with expiry. The library returns the result in the following format: { status: \"Success\", message: \"Token created successfully.\", token: \"kCspwCQjDpVO2O0p6CjS86BEa9blWxU8\", expires_in: 2304000, onSetTime: 1589380443128 } When the previous store token got expires the Oauth library returns the result in the following format: { message: \"Previous Token timed-out. Generated new token.\", status: \"Miss\", token: \"JpqtxGZJxiCsuIdmI5plbpM6y52QKWFP\" } When the previous store token is still valid then Oauth library returns the same token in the following format: { message: \"Previous Token is still valid.\", status: \"Hit\", token: \"7FMYrFZ2AFh1ck76SyFAD0F7GyPMHt3j\" } When the input client Id or client secret is invalid then Oauth library returns the message in the following format: { code: 400, message: \"Invalid Credentials\", status: \"Failure\" } Access FHIR Resources The resources are accessed using FHIR Library . With the access token and the fhir url , we hit the FHIR search API to fetch data. The function takes the query parameters and the resource name as arguments . It constructs an appropriate search URL and makes the request along with proper authentication and content-type headers. Some important elements required for the fhirSearch are: Access Token: This would be retrieved from the oauth lib. fhirUrl: This is retrieved from the Local storage. Error handling is also performed. The function returns data in the following format { entry: [{\u2026}], link: [{\u2026}], message: \"Successfully Executed\", resourceType: \"Bundle\", status: 200, totalCount: 1000, type: \"searchset\" } Following error message will come when there is a mistake in search param value like fhirSearch(resource,{\"active\":\"tru\"},1,5) { message: \"Boolean must be True or False\", status: 400 } Following error message will come when there is a mistake in input client secret : { message: \"Invalid Credentials\", status: \"Failure\" } The status key depicts the status of the search request.","title":"Home"},{"location":"#smart-on-fhir","text":"","title":"Smart on FHIR"},{"location":"#introduction","text":"This documentation will help you create a Sandbox Application using Github pages and Innovaccer Developer Portal to explore FHIR resources.","title":"Introduction"},{"location":"#prerequisites","text":"A Github account","title":"Prerequisites"},{"location":"#github-pages","text":"For the purposes of this tutorial we will be hosting our SMART on FHIR app through Github Pages. Github Pages is a convenient way to host static or client rendered web sites. Setting up Github pages is easy, so easy in fact that it\u2019s already done for you. It can also be done by the master branch appraoch, first of all, you need to clone the repository, got to settings and then enable the Github Pages there. Since you forked the tutorial, the gh-pages branch has already been created, however Github won\u2019t publish your site until you make a change to the gh-pages branch, so let\u2019s make a change. Modify the index.html page to include your Github user-name in the title, and commit directly to gh-pages branch. Use Github UI to directly edit index.html . Simply switch the branch to gh-pages, navigate to /smart-on-fhir-demo/app/index.html and click the pencil icon. Commit your changes to deploy. Once the app has been redeployed go to https://<gh-username>.github.io/smart-on-fhir-demo/app/index.html to ensure your app is available","title":"Github Pages"},{"location":"#project-structure","text":"The overall structure of repo \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 static \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 json-viewer.css \u2502 \u2502 \u2514\u2500\u2500 mainPage.css \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2514\u2500\u2500 innovaccer_logo.svg \u2502 \u2514\u2500\u2500 js \u2502 \u251c\u2500\u2500 data.js \u2502 \u251c\u2500\u2500 json-viewer.js \u2502 \u251c\u2500\u2500 pagination.js \u2502 \u251c\u2500\u2500 querySelect.js \u2502 \u251c\u2500\u2500 renderJSON.js \u2502 \u2514\u2500\u2500 script.js \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 base.html \u2502 \u251c\u2500\u2500 entrypoint.html \u2502 \u251c\u2500\u2500 static \u2502 \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2502 \u251c\u2500\u2500 base.css \u2502 \u2502 \u2502 \u251c\u2500\u2500 bootstrap.min.css \u2502 \u2502 \u2502 \u2514\u2500\u2500 font-awesome.min.css \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2502 \u251c\u2500\u2500 default_favicon.ico \u2502 \u2502 \u2502 \u2514\u2500\u2500 flowchart.png \u2502 \u2502 \u2514\u2500\u2500 js \u2502 \u2502 \u251c\u2500\u2500 bootstrap.min.js \u2502 \u2502 \u251c\u2500\u2500 fhir.js \u2502 \u2502 \u251c\u2500\u2500 jquery-3.2.1.slim.min.js \u2502 \u2502 \u251c\u2500\u2500 jquery.min.js \u2502 \u2502 \u251c\u2500\u2500 oauth.js \u2502 \u2502 \u251c\u2500\u2500 popper.min.js \u2502 \u2502 \u251c\u2500\u2500 storage.js \u2502 \u2502 \u2514\u2500\u2500 utils.js \u2502 \u2514\u2500\u2500 status.html \u251c\u2500\u2500 README.md For the reusability and scalability of the Application, its divided into 2 packages Core App","title":"Project Structure"},{"location":"#core","text":"The Core package contains the libraries that connect to the portal. These can be added to other applications as it is.The user can use these libraries to build desired custom applications. The key features of these libraries are Connect to the portal Authorize the users using OAuth2.0 Perform the FHIR Search operation","title":"Core"},{"location":"#app","text":"The App package contains the libraries used to build the application. The key features of these libraries are The UI of the application Display results in tabular format Perform custom query feature Pagination feature","title":"App"},{"location":"#project-setup","text":"The user needs to fork this repository and deploy it to Github pages. Guide to deploying a repository to Github pages can be found here https://help.github.com/en/github/working-with-github-pages . After getting the link for the deployed repository, the user needs to enter it in the developer portal and click verify. It is then checked whether the link is valid or not, by hitting the status.html page in the repo. The complete flow used is shown in the image below:","title":"Project Setup"},{"location":"#app-launch","text":"After the verification of the link by the portal, a launch button appears which on clicking launches the application After verification of the url in the entrypoint.html which contains the client id, api_url and the ouath_url, these are stored in the local/session storage and redirects to base.html . The user needs to enter the client_secret in the base.html which is again stored in local/session storage. Note ; Client secret is sensitive information and for the sample sandbox app we store them in Local storage. We recommend using alternative methods in production application and safeguarding the client_secret from XSS attacks. This then redirects to index.html which is the home page of our app. On the indexl, access token is obtained using oauth lib for","title":"App Launch"},{"location":"#access-token-retrieval","text":"The access token is generated using the oauth lib.","title":"Access Token Retrieval"},{"location":"#ouath-lib","text":"","title":"Ouath Lib"},{"location":"#our-authentication-follows-oauth-20-protocol-to-authorize-the-user-it-uses-the-client-credentials-grant-workflow","text":"To perform the authorization, the client_id, client_secret and oauth url which were stored in the previous steps are retrieved from the storage using the storageDriver. The accessToken is first searched in the storage, if present, it is checked whether the token is still valid or timed out. In case of a timed out token, a fresh one is requested. In case, token is not found in the storage, a fresh token is generated. Everytime a new token is generated, it is stored in the storage as well with expiry. The library returns the result in the following format: { status: \"Success\", message: \"Token created successfully.\", token: \"kCspwCQjDpVO2O0p6CjS86BEa9blWxU8\", expires_in: 2304000, onSetTime: 1589380443128 } When the previous store token got expires the Oauth library returns the result in the following format: { message: \"Previous Token timed-out. Generated new token.\", status: \"Miss\", token: \"JpqtxGZJxiCsuIdmI5plbpM6y52QKWFP\" } When the previous store token is still valid then Oauth library returns the same token in the following format: { message: \"Previous Token is still valid.\", status: \"Hit\", token: \"7FMYrFZ2AFh1ck76SyFAD0F7GyPMHt3j\" } When the input client Id or client secret is invalid then Oauth library returns the message in the following format: { code: 400, message: \"Invalid Credentials\", status: \"Failure\" }","title":"Our authentication follows OAuth 2.0 protocol to authorize the user. It uses the Client Credentials grant workflow."},{"location":"#access-fhir-resources","text":"","title":"Access FHIR Resources"},{"location":"#the-resources-are-accessed-using-fhir-library","text":"With the access token and the fhir url , we hit the FHIR search API to fetch data. The function takes the query parameters and the resource name as arguments . It constructs an appropriate search URL and makes the request along with proper authentication and content-type headers. Some important elements required for the fhirSearch are: Access Token: This would be retrieved from the oauth lib. fhirUrl: This is retrieved from the Local storage. Error handling is also performed. The function returns data in the following format { entry: [{\u2026}], link: [{\u2026}], message: \"Successfully Executed\", resourceType: \"Bundle\", status: 200, totalCount: 1000, type: \"searchset\" } Following error message will come when there is a mistake in search param value like fhirSearch(resource,{\"active\":\"tru\"},1,5) { message: \"Boolean must be True or False\", status: 400 } Following error message will come when there is a mistake in input client secret : { message: \"Invalid Credentials\", status: \"Failure\" } The status key depicts the status of the search request.","title":"The resources are accessed using FHIR Library ."}]}